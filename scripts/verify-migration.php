<?php

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
 */

require __DIR__ . '/../vendor/autoload.php';

$app = require_once __DIR__ . '/../bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use Illuminate\Support\Facades\DB;

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...\n\n";

// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ PostgreSQL
config(['database.default' => 'pgsql']);

$checks = [
    'users' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    'entities' => '–°—É—â–Ω–æ—Å—Ç–∏ (–∫–æ–º–ø–∞–Ω–∏–∏, –≥—Ä—É–ø–ø—ã –∏ —Ç.–¥.)',
    'categories' => '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    'images' => '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    'offers' => '–ê–∫—Ü–∏–∏',
    'appeals' => '–û–±—Ä–∞—â–µ–Ω–∏—è',
    'regions' => '–†–µ–≥–∏–æ–Ω—ã',
    'cities' => '–ì–æ—Ä–æ–¥–∞',
];

$totalRecords = 0;

echo "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

foreach ($checks as $table => $name) {
    try {
        $count = DB::table($table)->count();
        $totalRecords += $count;
        printf("%-30s %10d\n", $name, $count);
    } catch (\Exception $e) {
        echo "‚ùå {$name}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
    }
}

echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
printf("%-30s %10d\n", "–í–°–ï–ì–û –ó–ê–ü–ò–°–ï–ô", $totalRecords);
echo "\n";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π (Foreign Keys)
echo "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π:\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

$relationChecks = [
    ['table' => 'entities', 'column' => 'user_id', 'ref_table' => 'users', 'name' => 'Entity ‚Üí User'],
    ['table' => 'entities', 'column' => 'category_id', 'ref_table' => 'categories', 'name' => 'Entity ‚Üí Category'],
    ['table' => 'entities', 'column' => 'city_id', 'ref_table' => 'cities', 'name' => 'Entity ‚Üí City'],
    ['table' => 'entities', 'column' => 'region_id', 'ref_table' => 'regions', 'name' => 'Entity ‚Üí Region'],
    ['table' => 'images', 'column' => 'entity_id', 'ref_table' => 'entities', 'name' => 'Image ‚Üí Entity'],
    ['table' => 'offers', 'column' => 'entity_id', 'ref_table' => 'entities', 'name' => 'Offer ‚Üí Entity'],
];

foreach ($relationChecks as $check) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ foreign keys
        $broken = DB::table($check['table'])
            ->whereNotNull($check['column'])
            ->whereNotExists(function ($query) use ($check) {
                $query->select(DB::raw(1))
                    ->from($check['ref_table'])
                    ->whereColumn($check['ref_table'] . '.id', '=', $check['table'] . '.' . $check['column']);
            })
            ->count();
        
        if ($broken === 0) {
            echo "‚úÖ {$check['name']}: OK\n";
        } else {
            echo "‚ùå {$check['name']}: –Ω–∞–π–¥–µ–Ω–æ {$broken} –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n";
        }
    } catch (\Exception $e) {
        echo "‚ö†Ô∏è  {$check['name']}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å\n";
    }
}

echo "\n";
echo "================================\n";
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
echo "================================\n";

exit(0);
